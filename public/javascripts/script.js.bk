
function load_data(clicked_id)
{
    console.log(clicked_id);
}


var myJson, viewLevel = 0, viewString = 'जोन';




var win = window, docm = document, em = docm.documentElement, gin = document.body;

var x_dim = win.innerWidth || em.clientWidth || gin.clientWidth;
var y_dim = win.innerHeight || em.clientHeight || gin.clientHeight;

var margin = {top: 0.1*y_dim, right: 0.3*x_dim, bottom: 0.4*y_dim, left: 0.3*x_dim},
    width = x_dim - margin.left - margin.right,
    height = y_dim - margin.top - margin.bottom;

function type(d) {
  d.frequency = +d.frequency;
  return d;
}

function depopulateDropDowns(level){
  var select = document.getElementById("s"+level);
  while(select.options.length>0){
    select.remove(0);
  }
  var el = document.createElement("option");
  el.textContent = 'All';
  el.value = 'All';
  select.appendChild(el);
}

function populateDropDowns(level, entityList){
  for(l = level; l <= 3; l++){
    depopulateDropDowns(l);                 // clean up old list before adding new list
  }
  var select = document.getElementById("s"+level);
  for(var i = 0; i < entityList.length; i++) {
      var opt = entityList[i]._id;
      var el = document.createElement("option");
      el.textContent = opt;
      el.value = opt;
      el.onclick = function(d){
        console.log('Clicked');
      }
      select.appendChild(el);
      select.onchange = function(){
        console.log(this.value);
        user_input.api = user_input.api + '/' + this.value;
      }
  }
}
/*
.on('click', function(d){
if(!event.detail || event.detail == 1){
      console.log(d._id);
      user_input.api = user_input.api + '/' + d._id;
plot.selectAll("*").remove();
}
})
*/
function setViewString(level){
	switch(level){
	case 0:
	  viewString = 'जोन';
	  break;
	case 1:
	  viewString = 'परिक्षेत्र';
    	  break;
	case 2:
	  viewString = 'जनपद';
	  break;
	case 3:
	  viewString = 'थाना';
	  break;
	default:
	  viewString = 'जोन';
	}
}

function drawGraph(plot,data){

var x = d3.scale.ordinal()
    .rangeRoundBands([0, width], .1);

var y = d3.scale.linear()
    .range([height, 0]);

var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom")
    .tickSize(0);

var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left")
    .tickFormat(formatPercent);

x.domain(data.map(function(d) { return d._id; }));
y.domain([0, d3.max(data, function(d) { return d.count; })]);

plot.append("g")
    .attr("class", "x axis")
    .attr("transform", "translate(0," + height + ")")
    .call(xAxis)
/*  .append("text")
    .attr("transform", "translate(" + (width / 2) + " ," + (height -350 + margin.bottom) + ")")
    .style("text-anchor", "middle")
    .text(viewString)
    .attr("color", 'white');
*/
plot.append("text")
    .attr("transform", "translate(" + (width / 2) + " ," + (height -350 + margin.bottom) + ")")
    .text(viewString);

plot.append("g")
    .attr("class", "y axis")
    .call(yAxis)
  /*.append("text")
    .attr("transform", "rotate(-90)")
    .attr("x",-170)
    .attr("y", -70)
    .attr("dy", ".91em")
    .style("text-anchor", "end")
    .text("लंबित विवेचनाएं     %");
*/
plot.selectAll(".bar")
    .data(data)
  .enter().append("rect")
    .attr("class", "bar")
    .attr("x", function(d) { return x(d._id); })
    .attr("width", x.rangeBand())
    .attr("y", function(d) { return y(d.count); })
    .attr("height", function(d) { return height - y(d.count); })
    .on('mouseover', tip.show)
    .on('mouseout', tip.hide)
}

async function userAction (plots,api) {
  var response = await fetch('http://srivalab.cse.iitk.ac.in:3000/'+api);
  if(response.ok){
	  myJson = await response.json(); //extract JSON from the http response
	  console.log(myJson);
	  drawGraph(plots[0], myJson[0].slice(0,6));
    drawGraph(plots[1], myJson[0].slice(6,myJson[0].length));
    populateDropDowns(viewLevel, myJson[1]);
	  setViewString(viewLevel++);
//    height = plots[0].node().getBBox().height;
//    width = plots[0].node().getBBox().width;
	} else{
		console.log('Resource not found');
		user_input.api = "users";
		viewLevel = 0;
		setViewString(viewLevel);
	}
}



var formatPercent = d3.format("");

/*
var svg = d3.select("body").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
    .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
*/

var svg1 = d3.select("td#plot1").append("svg")
    .attr("width", '100%')
    .attr("height", '100%')
    .append("g")
    .style('transform', 'translate(10%, 10%)');

var svg2 = d3.select("td#plot2").append("svg")
    .attr("width", '100%')
    .attr("height", '100%')
    .append("g")
    .style('transform', 'translate(15%, 10%)');

var tip = d3.tip()
  .attr('class', 'd3-tip')
  .offset([-10, 0])
  .html(function(d) {
    return  "<span style='color:red'>" + d._id + "</span> <span style='color:white'>" + d.count + "</span>";
  })


svg1.call(tip);
svg2.call(tip);
plots = [svg1, svg2];

var user_input = {
	apistring: "users",
	get api() {
		return this.apistring;
	},
	set api(choice) {
		this.apistring = choice;
    console.log("hi");
    plots[0].selectAll("*").remove();
    plots[1].selectAll("*").remove();
		userAction(plots,choice);
	}
}


userAction(plots,user_input.api);
